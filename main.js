<<<<<<< HEAD
(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    position: relative;\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    margin-top: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    /* gap: 5px; */\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n\n.task-form {\n    padding: 25px 25px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;IAGI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,yCAAyC;IACzC,eAAe;;AAEnB;;AAEA;IACI,mCAAmC;IACnC,yBAAyB;IACzB,wBAAwB;IACxB,6BAA6B;;AAEjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uCAAuC;IACvC,mBAAmB;IACnB,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,iDAAiD;IACjD,4BAA4B;IAC5B,+BAA+B;IAC/B,8BAA8B;IAC9B,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,oBAAoB;IACpB,2BAA2B;IAC3B,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,cAAc;IACd,uBAAuB;IACvB,2BAA2B;IAC3B,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,kBAAkB;IAClB,uBAAuB;IACvB,2BAA2B;IAC3B,uCAAuC;AAC3C;;AAEA;;;;IAII,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,iDAAiD;IACjD,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,cAAc;IACd,QAAQ;IACR,cAAc;IACd,uBAAuB;IACvB,aAAa;IACb,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,QAAQ;IACR;kBACc;IACd,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,uBAAuB;IACvB,kBAAkB;IAClB,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;;AAGA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;IACT,QAAQ;IACR,iCAAiC;IACjC,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;IACZ,iDAAiD;IACjD,aAAa;IACb,4BAA4B;IAC5B,6BAA6B;IAC7B,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,6BAA6B;IAC7B,4BAA4B;AAChC;;AAEA;;IAEI,8BAA8B;IAC9B,gCAAgC;IAChC,eAAe;;AAEnB",sourcesContent:["*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    position: relative;\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    margin-top: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    /* gap: 5px; */\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n\n.task-form {\n    padding: 25px 25px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(i[A]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],c=0;c<n.length;c++){var A=n[c],s=o.base?A[0]+o.base:A[0],d=a[s]||0,l="".concat(s," ").concat(d);a[s]=d+1;var p=t(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=c,e.splice(c,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var A=o(n,r),s=0;s<a.length;s++){var d=t(a[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=A}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),i=t.n(a),c=t(565),A=t.n(c),s=t(216),d=t.n(s),l=t(589),p=t.n(l),u=t(426),m={};m.styleTagTransform=p(),m.setAttributes=A(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const f=n=>{const e=document.getElementById("overlay");n.classList.add("active"),e.classList.add("active")},x=n=>{const e=document.getElementById("overlay");n.classList.remove("active"),e.classList.remove("active")};let B=0;function C(n){for(;n.hasChildNodes();)n.removeChild(n.lastChild)}const b=document.querySelector(".create"),I=document.querySelector(".add-task"),g=document.querySelector(".submit"),v=[];b.addEventListener("click",(()=>{B++;const n=((n,e)=>{const t=[];return{title:n,id:e,tasks:t,renderTask:n=>{t.forEach((e=>function(n,e,t,o){const r=document.querySelector(".tasks"),a=document.createElement("div");a.className="task";const i=document.createElement("h3");i.innerText=n;const c=document.createElement("p");c.innerText=e;const A=document.createElement("button");A.innerText="Details",A.className="details-btn";const s=document.createElement("button");s.innerText="Delete",s.className="delete-button";const d=document.createElement("div");d.className="btn-container",A.addEventListener("click",(()=>{!function(n,e){C(n);const t=document.createElement("h3"),o=document.createElement("h3"),r=document.createElement("h3"),a=document.createElement("h3");t.innerText="Title:",o.innerText="Description:",r.innerText="Due date:",a.innerText="Priority:";const i=document.createElement("p");i.innerText=e.title;const c=document.createElement("p");c.innerText=e.description;const A=document.createElement("p");A.innerText=e.dueDate;const s=document.createElement("p");s.innerText=e.priority;const d=document.createElement("button");d.innerText="Close",d.className="close-button",d.addEventListener("click",(()=>{x(n)})),f(n),n.append(t,i,o,c,r,A,a,s,d)}(document.querySelector(".task-details"),t)})),s.addEventListener("click",(()=>{a.remove(),o.removeTask(t)})),d.append(A,s),r.append(a),a.append(i,c,d)}(e.title,e.dueDate,e,n)))},addTask:n=>{n.id=t.length+1,t.push(n)},addProject:(n,e)=>{n.push(e)},removeTask:n=>{const e=t.indexOf(n);t.splice(e,1)}}})(`Project ${B}`,B);n.addProject(v,n),function(n){const e=document.querySelector(".projects"),t=document.createElement("div");t.className="project";const o=document.createElement("h3");o.innerText=n.title,e.append(t),t.append(o),t.addEventListener("click",(()=>{C(document.querySelector(".tasks")),n.renderTask(n)}))}(n),function(){const n=[...document.querySelectorAll(".project")];n.forEach((e=>{e.addEventListener("click",(t=>{n.forEach((n=>n.classList.remove("active"))),e.classList.add("active")}))}))}(),function(n,e){const t=document.getElementById("project");if(0===n.length)return;const o=document.createElement("option");o.value=e,o.innerText=`Project ${e}`,t.append(o)}(v,B)})),I.addEventListener("click",(()=>{document.querySelector('input[id="title"]').value="",document.querySelector('textarea[id="desc"]').value="";const n=document.querySelector(".task-form");f(n)})),overlay.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{x(n)}))})),g.addEventListener("click",(n=>{n.preventDefault();const e=document.querySelector(".task-form");if(0==v.length)return alert("You must create a project first"),void x(e);const t=function(){const n=document.getElementById("title").value,e=document.getElementById("desc").value,t=document.querySelector('input[name="priority"]:checked').id,o=document.getElementById("project"),r=((n,e,t,o,r,a)=>({id:0,title:n,description:e,priority:t,projSelection:o,projectParent:r,dueDate:document.getElementById("date").value}))(n,e,t,o,o.options[o.selectedIndex].text);return r}();v.forEach((n=>{t.projectParent===n.title&&n.addTask(t)})),x(e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0N4RSxHQUNwRXNMLEVBQW1CL0csU0FBU29ELGVBQWUsV0FNM0M0RCxFRGxJbUIsRUFBQzlDLEVBQU1vQixFQUFZQyxFQUFTMEIsRUFBY0MsRUFBY3RDLEtBSTFFLENBQUVuSixHQUZBLEVBRUl5SSxRQUFPb0IsY0FBYUMsV0FBVTBCLGdCQUFjQyxnQkFBY3RDLFFDNkh2RDVFLFNBQVNvRCxlQUFlLFFBQVF1RCxRQUNoQ1EsQ0FBY2pELEVBQU1vQixFQUFZQyxFQUM1Q3dCLEVBTmtCQSxFQUFpQjdJLFFBQVE2SSxFQUFpQkssZUFBZUMsTUFPL0UsT0FBT0wsQ0FDWCxDQzlGaUJNLEdBRWJ2RCxFQUFTTSxTQUFRMkIsSUFDVDFCLEVBQUs0QyxnQkFBa0JsQixFQUFROUIsT0FDL0I4QixFQUFRSCxRQUFRdkIsRUFDcEIsSUFHSmYsRUFBV0wsRUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvcHJvamVjdExvZ2ljLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvRE9NQ3JlYXRpb24uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosXFxuKjo6YWZ0ZXIsXFxuKjo6YmVmb3JlIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG4gICAgZm9udC1zaXplOiAxNXB4O1xcblxcbn1cXG5cXG46cm9vdCB7XFxuICAgIC0tcHJqY3QtdHNrLWJhY2tncm91bmQtY2xyOiAjZDVlYWVjO1xcbiAgICAtLWJhY2tncm91bmQtY2xyOiAjMmUzMzM1O1xcbiAgICAtLW1haW4tZm9udC1jbHI6ICMxYjFlMWY7XFxuICAgIC0tcHJvamVjdC10YXNrLWhvdmVyOiAjMmUzMzM1O1xcblxcbn1cXG5cXG5ib2R5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jbHIpO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1hcmdpbi10b3A6IDUwcHg7XFxuICAgIGhlaWdodDogMTAwdmg7XFxufVxcblxcbiNjb250YWluZXIge1xcbiAgICBtaW4taGVpZ2h0OiA3MCU7XFxufVxcblxcbi5wcm9qZWN0cyxcXG4udGFza3Mge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBnYXA6IDEwcHg7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByamN0LXRzay1iYWNrZ3JvdW5kLWNscik7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDVweDtcXG4gICAgd2lkdGg6IDMwMHB4O1xcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG4ucHJvamVjdHMge1xcbiAgICBtYXgtaGVpZ2h0OiA0NSU7XFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxufVxcblxcbi5wcm9qZWN0cyA+IC5wcm9qZWN0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1zaHJpbms6IDA7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgICBjb2xvcjogdmFyKC0tbWFpbi1mb250LWNscik7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxufVxcblxcbi50YXNrcyA+IC50YXNrIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZmxleC1zaHJpbms6IDA7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBjb2xvcjogdmFyKC0tbWFpbi1mb250LWNscik7XFxuICAgIGJvcmRlcjogc29saWQgNHB4IHZhcigtLWJhY2tncm91bmQtY2xyKTtcXG59XFxuXFxuLnRhc2tzID4gLnRhc2sgLmRldGFpbHMtYnRuLFxcbi50YXNrLWRldGFpbHMgPiAuY2xvc2UtYnV0dG9uLFxcbi5zdWJtaXQsXFxuLnRhc2tzID4gLnRhc2sgLmRlbGV0ZS1idXR0b24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByamN0LXRzay1iYWNrZ3JvdW5kLWNscik7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmJ0bi1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDEwcHg7XFxufVxcblxcbi50YXNrLWRldGFpbHMge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIC8qIGdhcDogNXB4OyAqL1xcbiAgICB0b3A6IDMwJTtcXG4gICAgbWF4LXdpZHRoOiA2MCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxufVxcblxcbi50YXNrLWRldGFpbHMgPiBoMyB7XFxuICAgIG1hcmdpbjogMTBweCAwIDEwcHggMDtcXG59XFxuXFxuLnRhc2stZGV0YWlscy5hY3RpdmUge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogMzAlO1xcbiAgICAvKiB3aWR0aDogNDAlO1xcbiAgICBoZWlnaHQ6IDYwJTsgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxufVxcblxcbi50YXNrLWRldGFpbHMgPiAuY2xvc2UtYnV0dG9uIHtcXG4gICAgd2lkdGg6IDY0cHg7XFxufVxcblxcbi5wcm9qZWN0LmFjdGl2ZSB7XFxuICAgIGJvcmRlcjogc29saWQgNHB4IHZhcigtLWJhY2tncm91bmQtY2xyKVxcbn1cXG5cXG4ubW9kYWwge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIHRvcDogMzAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMjUwbXM7XFxuICAgIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4ubW9kYWwuYWN0aXZlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG59XFxuXFxuXFxuLnRhc2stZm9ybSB7XFxuICAgIHBhZGRpbmc6IDI1cHggMjVweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi50YXNrLWZvcm0gLmlubmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAxNXB4O1xcbn1cXG5cXG4udGFzay1mb3JtIGlucHV0OjpwbGFjZWhvbGRlcixcXG4udGFzay1mb3JtIHRleHRhcmVhOjpwbGFjZWhvbGRlciB7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4udGFzay1mb3JtIHRleHRhcmVhIHtcXG4gICAgcmVzaXplOiBub25lO1xcbiAgICBoZWlnaHQ6IDEwMHB4O1xcbn1cXG5cXG4jb3ZlcmxheSB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLCAuNSk7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4jb3ZlcmxheS5hY3RpdmUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cXG5cXG4uY3JlYXRlLFxcbi5hZGQtdGFzayB7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJqY3QtdHNrLWJhY2tncm91bmQtY2xyKTtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTBweDtcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDEwcHg7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgd2lkdGg6IDEzNXB4O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAwcHggd2hpdGU7XFxuICAgIHRyYW5zaXRpb246IGJveC1zaGFkb3cgNTAwbXM7XFxufVxcblxcbi5jcmVhdGU6aG92ZXIsXFxuLmFkZC10YXNrOmhvdmVyIHtcXG4gICAgYm94LXNoYWRvdzogMjNweCAwcHggMHB4IHdoaXRlO1xcbiAgICBjb2xvcjogdmFyKC0tcHJvamVjdC10YXNrLWhvdmVyKTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7SUFHSSxzQkFBc0I7SUFDdEIsVUFBVTtJQUNWLFNBQVM7SUFDVCx5Q0FBeUM7SUFDekMsZUFBZTs7QUFFbkI7O0FBRUE7SUFDSSxtQ0FBbUM7SUFDbkMseUJBQXlCO0lBQ3pCLHdCQUF3QjtJQUN4Qiw2QkFBNkI7O0FBRWpDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1Q0FBdUM7SUFDdkMsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7O0lBRUksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsYUFBYTtJQUNiLGlEQUFpRDtJQUNqRCw0QkFBNEI7SUFDNUIsK0JBQStCO0lBQy9CLDhCQUE4QjtJQUM5QixZQUFZO0lBQ1osZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLDJCQUEyQjtJQUMzQix1QkFBdUI7SUFDdkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLDJCQUEyQjtJQUMzQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLDJCQUEyQjtJQUMzQix1Q0FBdUM7QUFDM0M7O0FBRUE7Ozs7SUFJSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGlEQUFpRDtJQUNqRCxlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGVBQWU7SUFDZixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGNBQWM7SUFDZCxRQUFRO0lBQ1IsY0FBYztJQUNkLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1I7a0JBQ2M7SUFDZCx1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0k7QUFDSjs7QUFFQTtJQUNJLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsUUFBUTtJQUNSLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7O0FBR0E7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixTQUFTO0FBQ2I7O0FBRUE7O0lBRUksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixpQ0FBaUM7SUFDakMsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLG1CQUFtQjtBQUN2Qjs7QUFFQTs7SUFFSSxZQUFZO0lBQ1osaURBQWlEO0lBQ2pELGFBQWE7SUFDYiw0QkFBNEI7SUFDNUIsNkJBQTZCO0lBQzdCLGVBQWU7SUFDZixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLDZCQUE2QjtJQUM3Qiw0QkFBNEI7QUFDaEM7O0FBRUE7O0lBRUksOEJBQThCO0lBQzlCLGdDQUFnQztJQUNoQyxlQUFlOztBQUVuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqLFxcbio6OmFmdGVyLFxcbio6OmJlZm9yZSB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG5cXG59XFxuXFxuOnJvb3Qge1xcbiAgICAtLXByamN0LXRzay1iYWNrZ3JvdW5kLWNscjogI2Q1ZWFlYztcXG4gICAgLS1iYWNrZ3JvdW5kLWNscjogIzJlMzMzNTtcXG4gICAgLS1tYWluLWZvbnQtY2xyOiAjMWIxZTFmO1xcbiAgICAtLXByb2plY3QtdGFzay1ob3ZlcjogIzJlMzMzNTtcXG5cXG59XFxuXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY2xyKTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBtYXJnaW4tdG9wOiA1MHB4O1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbn1cXG5cXG4jY29udGFpbmVyIHtcXG4gICAgbWluLWhlaWdodDogNzAlO1xcbn1cXG5cXG4ucHJvamVjdHMsXFxuLnRhc2tzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmpjdC10c2stYmFja2dyb3VuZC1jbHIpO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNXB4O1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNXB4O1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1cHg7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgb3ZlcmZsb3c6IHNjcm9sbDtcXG59XFxuXFxuLnByb2plY3RzIHtcXG4gICAgbWF4LWhlaWdodDogNDUlO1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG5cXG4ucHJvamVjdHMgPiAucHJvamVjdCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtc2hyaW5rOiAwO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcXG4gICAgY29sb3I6IHZhcigtLW1haW4tZm9udC1jbHIpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG5cXG4udGFza3MgPiAudGFzayB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGZsZXgtc2hyaW5rOiAwO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDE1cHg7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogN3B4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IHZhcigtLW1haW4tZm9udC1jbHIpO1xcbiAgICBib3JkZXI6IHNvbGlkIDRweCB2YXIoLS1iYWNrZ3JvdW5kLWNscik7XFxufVxcblxcbi50YXNrcyA+IC50YXNrIC5kZXRhaWxzLWJ0bixcXG4udGFzay1kZXRhaWxzID4gLmNsb3NlLWJ1dHRvbixcXG4uc3VibWl0LFxcbi50YXNrcyA+IC50YXNrIC5kZWxldGUtYnV0dG9uIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgYm9yZGVyLXJhZGl1czogN3B4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmpjdC10c2stYmFja2dyb3VuZC1jbHIpO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idG4tY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4udGFzay1kZXRhaWxzIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAvKiBnYXA6IDVweDsgKi9cXG4gICAgdG9wOiAzMCU7XFxuICAgIG1heC13aWR0aDogNjAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbn1cXG5cXG4udGFzay1kZXRhaWxzID4gaDMge1xcbiAgICBtYXJnaW46IDEwcHggMCAxMHB4IDA7XFxufVxcblxcbi50YXNrLWRldGFpbHMuYWN0aXZlIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDMwJTtcXG4gICAgLyogd2lkdGg6IDQwJTtcXG4gICAgaGVpZ2h0OiA2MCU7ICovXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbn1cXG5cXG4udGFzay1kZXRhaWxzID4gLmNsb3NlLWJ1dHRvbiB7XFxuICAgIHdpZHRoOiA2NHB4O1xcbn1cXG5cXG4ucHJvamVjdC5hY3RpdmUge1xcbiAgICBib3JkZXI6IHNvbGlkIDRweCB2YXIoLS1iYWNrZ3JvdW5kLWNscilcXG59XFxuXFxuLm1vZGFsIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICB0b3A6IDMwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDI1MG1zO1xcbiAgICB6LWluZGV4OiAxMDtcXG59XFxuXFxuLm1vZGFsLmFjdGl2ZSB7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxufVxcblxcblxcbi50YXNrLWZvcm0ge1xcbiAgICBwYWRkaW5nOiAyNXB4IDI1cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4udGFzay1mb3JtIC5pbm5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogMTVweDtcXG59XFxuXFxuLnRhc2stZm9ybSBpbnB1dDo6cGxhY2Vob2xkZXIsXFxuLnRhc2stZm9ybSB0ZXh0YXJlYTo6cGxhY2Vob2xkZXIge1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnRhc2stZm9ybSB0ZXh0YXJlYSB7XFxuICAgIHJlc2l6ZTogbm9uZTtcXG4gICAgaGVpZ2h0OiAxMDBweDtcXG59XFxuXFxuI292ZXJsYXkge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwgLjUpO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuI292ZXJsYXkuYWN0aXZlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuXFxuLmNyZWF0ZSxcXG4uYWRkLXRhc2sge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByamN0LXRzay1iYWNrZ3JvdW5kLWNscik7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDEwcHg7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAxMHB4O1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIHdpZHRoOiAxMzVweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMHB4IHdoaXRlO1xcbiAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDUwMG1zO1xcbn1cXG5cXG4uY3JlYXRlOmhvdmVyLFxcbi5hZGQtdGFzazpob3ZlciB7XFxuICAgIGJveC1zaGFkb3c6IDIzcHggMHB4IDBweCB3aGl0ZTtcXG4gICAgY29sb3I6IHZhcigtLXByb2plY3QtdGFzay1ob3Zlcik7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gYm9yZGVyT25DbGljaygpIHtcblxuICAgIGNvbnN0IHByb2plY3RzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0JyldO1xuXG4gICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgcHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBwcm9qZWN0cy5mb3JFYWNoKGUgPT4gZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG4gICAgICAgICAgICBwcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IG9wZW5Nb2RhbCA9IChtb2RhbCkgPT4ge1xuICAgIC8vIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJyk7XG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5Jyk7XG4gICAgbW9kYWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsb3NlTW9kYWwgPSAobW9kYWwpID0+IHtcbiAgICAvLyBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCcpO1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpO1xuICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG59IiwiaW1wb3J0IHsgYWRkVGFza1RvRE9NLCBhZGRQcm9qZWN0VG9ET00sIGNsZWFyVGFza3MgfSBmcm9tICcuL0RPTUNyZWF0aW9uJ1xuaW1wb3J0IHsgYm9yZGVyT25DbGljayB9IGZyb20gJy4vdXRpbGl0aWVzJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRhc2tPYmogPSAodGl0bGUsZGVzY3JpcHRpb24scHJpb3JpdHkscHJvalNlbGVjdGlvbixwcm9qZWN0UGFyZW50LGR1ZURhdGUgKSA9PiB7XG5cbiAgICBsZXQgaWQgPSAwO1xuXG4gICAgcmV0dXJuIHsgaWQsIHRpdGxlLCBkZXNjcmlwdGlvbiwgcHJpb3JpdHksIHByb2pTZWxlY3Rpb24scHJvamVjdFBhcmVudCxkdWVEYXRlIH1cbn1cblxuZXhwb3J0IGxldCBwcm9qZWN0TnVtQ291bnQgPSAwO1xuXG5leHBvcnQgY29uc3QgUHJvamVjdCA9ICh0aXRsZSwgaWQpID0+IHtcblxuICAgIGNvbnN0IHRhc2tzID0gW107XG5cbiAgICBjb25zdCBhZGRQcm9qZWN0ID0gKGFycmF5LHByb2plY3QpID0+IHtcbiAgICAgICAgYXJyYXkucHVzaChwcm9qZWN0KTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRUYXNrID0gKHRhc2spID0+IHtcbiAgICAgICAgdGFzay5pZCA9IHRhc2tzLmxlbmd0aCArMTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrKVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlclRhc2sgPSAocHJvamVjdE9iaikgPT4ge1xuICAgICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4gYWRkVGFza1RvRE9NKHRhc2sudGl0bGUsdGFzay5kdWVEYXRlLHRhc2ssIHByb2plY3RPYmopKTtcbiAgICBcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVUYXNrID0gKHRhc2spID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YXNrcy5pbmRleE9mKHRhc2spO1xuICAgICAgICB0YXNrcy5zcGxpY2UoaW5kZXgsMSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IHRpdGxlLCBpZCwgdGFza3MsIHJlbmRlclRhc2ssIGFkZFRhc2ssIGFkZFByb2plY3QscmVtb3ZlVGFzayB9IFxufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFza09uUHJvakNsaWNrKHByb2plY3RBcnJheSkge1xuXG4vLyAgICAgLy8gY29uc3QgcHJvamVjdEVsZW1lbnRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpKTtcblxuLy8gICAgIC8vIGNvbnN0IHByb2plY3RPYmogPSBwcm9qZWN0QXJyYXkuYXQoLTEpO1xuLy8gICAgIC8vIHByb2plY3RFbGVtZW50cy5hdCgtMSkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4vLyAgICAgLy8gICAgIGNvbnN0IHRhc2tFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrcycpO1xuLy8gICAgIC8vICAgICByZW1vdmVET01UYXNrcyh0YXNrRWxlbWVudHMpO1xuXG4vLyAgICAgLy8gICAgIGNvbnN0IHsgdGFza3MgfSA9IHByb2plY3RPYmo7XG5cbi8vICAgICAvLyAgICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IGFkZFRhc2tUb0RPTSh0YXNrLnRpdGxlLHRhc2suZHVlRGF0ZSkpO1xuXG4vLyAgICAgICAgIGNvbnN0IHRhc2tTZWxlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza3MnKTtcbi8vICAgICAgICAgY29uc3QgdGFza0RldGFpbHNCdG4gPSB0YXNrU2VsZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZXRhaWxzLWJ0bicpO1xuLy8gICAgICAgICB0YXNrRGV0YWlsc0J0bi5mb3JFYWNoKChidG4sIGkpID0+IHtcbi8vICAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbi8vICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFzay1kZXRhaWxzJyk7XG4vLyAgICAgICAgICAgICAgICAgcmVtb3ZlRE9NVGFza3MoY29udGFpbmVyKTtcbi8vICAgICAgICAgICAgICAgICByZW5kZXJUYXNrRGV0YWlscyhjb250YWluZXIscHJvamVjdE9iaixpKTtcbi8vICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICB9KTtcblxuLy8gICAgICAgICBjb25zdCBhbGxUYXNrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJyk7XG4vLyAgICAgICAgIGNvbnN0IGRlbGV0ZVRhc2tCdG4gPSB0YXNrU2VsZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxldGUtYnV0dG9uJyk7XG4vLyAgICAgICAgIGRlbGV0ZVRhc2tCdG4uZm9yRWFjaCgoYnRuLCBpKSA9PiB7XG4vLyAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgYWxsVGFza3NbaV0ucmVtb3ZlKCk7XG4vLyAgICAgICAgICAgICAgICAgdGFza3Muc3BsaWNlKGksIDEpO1xuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH0pO1xuXG4vLyAgICAgfSk7XG4vLyB9OyIsImltcG9ydCB7IGNsb3NlTW9kYWwsIG9wZW5Nb2RhbCB9IGZyb20gXCIuL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgY3JlYXRlVGFza09iaiB9IGZyb20gXCIuL3Byb2plY3RMb2dpY1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvamVjdFRvRE9NKG9iaikge1xuXG4gICAgY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMnKTtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmV3UHJvamVjdC5jbGFzc05hbWUgPSAncHJvamVjdCc7XG5cbiAgICBjb25zdCBwcm9qZWN0SGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgcHJvamVjdEhlYWRpbmcuaW5uZXJUZXh0ID0gb2JqLnRpdGxlO1xuXG4gICAgcHJvamVjdHMuYXBwZW5kKG5ld1Byb2plY3QpO1xuICAgIG5ld1Byb2plY3QuYXBwZW5kKHByb2plY3RIZWFkaW5nKTtcblxuXG4gICAgbmV3UHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrcycpO1xuICAgICAgICBjbGVhclByZXZpb3VzVGFza3MoY29udGFpbmVyKTtcbiAgICAgICAgb2JqLnJlbmRlclRhc2sob2JqKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUHJldmlvdXNUYXNrcyhlbGVtZW50KSB7XG5cbiAgICB3aGlsZSAoZWxlbWVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50Lmxhc3RDaGlsZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVGFza1RvRE9NKHRpdGxlLCBkYXRlLCBvYmosIHByb2plY3RPYmopIHtcblxuICAgIGNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2tzJyk7XG5cbiAgICBjb25zdCBuZXdUYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmV3VGFzay5jbGFzc05hbWUgPSAndGFzayc7XG5cbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICAgIHRhc2tUaXRsZS5pbm5lclRleHQgPSB0aXRsZTtcblxuICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgZHVlRGF0ZS5pbm5lclRleHQgPSBkYXRlO1xuXG4gICAgY29uc3QgZGV0YWlsc0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGRldGFpbHNCdXR0b24uaW5uZXJUZXh0ID0gJ0RldGFpbHMnO1xuICAgIGRldGFpbHNCdXR0b24uY2xhc3NOYW1lID0gJ2RldGFpbHMtYnRuJztcblxuICAgIGNvbnN0IGRlbGV0ZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGRlbGV0ZUJ0bi5pbm5lclRleHQgPSAnRGVsZXRlJztcbiAgICBkZWxldGVCdG4uY2xhc3NOYW1lID0gJ2RlbGV0ZS1idXR0b24nO1xuXG4gICAgY29uc3QgYnRuQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYnRuQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdidG4tY29udGFpbmVyJztcblxuICAgIGRldGFpbHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWRldGFpbHMnKTtcbiAgICAgICAgcmVuZGVyVGFza0RldGFpbHMoY29udGFpbmVyLCBvYmopO1xuICAgIH0pO1xuXG4gICAgZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBuZXdUYXNrLnJlbW92ZSgpO1xuICAgICAgICBwcm9qZWN0T2JqLnJlbW92ZVRhc2sob2JqKTtcbiAgICB9KTtcblxuICAgIGJ0bkNvbnRhaW5lci5hcHBlbmQoZGV0YWlsc0J1dHRvbiwgZGVsZXRlQnRuKTtcblxuICAgIHRhc2tzLmFwcGVuZChuZXdUYXNrKTtcbiAgICBuZXdUYXNrLmFwcGVuZCh0YXNrVGl0bGUsZHVlRGF0ZSxidG5Db250YWluZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFza0RldGFpbHMoY29udGFpbmVyLHRhc2spIHtcblxuICAgIGNsZWFyUHJldmlvdXNUYXNrcyhjb250YWluZXIpO1xuXG4gICAgY29uc3QgdGl0bGVIZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBjb25zdCBkZXNjSGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgY29uc3QgZGF0ZUhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICAgIGNvbnN0IHByaW9yaXR5SGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG5cbiAgICB0aXRsZUhlYWQuaW5uZXJUZXh0ID0gJ1RpdGxlOidcbiAgICBkZXNjSGVhZC5pbm5lclRleHQgPSAnRGVzY3JpcHRpb246J1xuICAgIGRhdGVIZWFkLmlubmVyVGV4dCA9ICdEdWUgZGF0ZTonXG4gICAgcHJpb3JpdHlIZWFkLmlubmVyVGV4dCA9ICdQcmlvcml0eTonXG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICB0aXRsZS5pbm5lclRleHQgPSB0YXNrLnRpdGxlO1xuXG4gICAgY29uc3QgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBkZXNjLmlubmVyVGV4dCA9IHRhc2suZGVzY3JpcHRpb247XG5cbiAgICBjb25zdCBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGRhdGUuaW5uZXJUZXh0ID0gdGFzay5kdWVEYXRlO1xuXG4gICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgcHJpb3JpdHkuaW5uZXJUZXh0ID0gdGFzay5wcmlvcml0eTtcblxuICAgIGNvbnN0IGV4aXRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBleGl0QnRuLmlubmVyVGV4dCA9ICdDbG9zZSc7XG4gICAgZXhpdEJ0bi5jbGFzc05hbWUgPSAnY2xvc2UtYnV0dG9uJztcblxuICAgIGV4aXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNsb3NlTW9kYWwoY29udGFpbmVyKTtcbiAgICB9KTtcbiAgICBcbiAgICBvcGVuTW9kYWwoY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmQodGl0bGVIZWFkLHRpdGxlLGRlc2NIZWFkLGRlc2MsXG4gICAgICAgIGRhdGVIZWFkLGRhdGUscHJpb3JpdHlIZWFkLHByaW9yaXR5LCBleGl0QnRuKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRHJvcERvd24oYXJyYXksIGFycmF5TnVtYmVyKSB7XG4gICAgY29uc3QgZHJvcERvd25NZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3QnKTtcblxuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIG9wdGlvbi52YWx1ZSA9IGFycmF5TnVtYmVyOyBcbiAgICBvcHRpb24uaW5uZXJUZXh0ID0gYFByb2plY3QgJHthcnJheU51bWJlcn1gO1xuICAgIGRyb3BEb3duTWVudS5hcHBlbmQob3B0aW9uKTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcklucHV0RnJvbURPTSgpIHtcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2MnKS52YWx1ZTtcbiAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJwcmlvcml0eVwiXTpjaGVja2VkJykuaWQ7XG4gICAgY29uc3QgcHJvamVjdFNlbGVjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0Jyk7XG4gICAgY29uc3QgcHJvamVjdFBhcmVudCA9IHByb2plY3RTZWxlY3Rpb24ub3B0aW9uc1twcm9qZWN0U2VsZWN0aW9uLnNlbGVjdGVkSW5kZXhdLnRleHQ7XG5cblxuXG4gICAgY29uc3QgZHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlJykudmFsdWU7XG4gICAgY29uc3QgdGFza09iaiA9IGNyZWF0ZVRhc2tPYmoodGl0bGUsZGVzY3JpcHRpb24scHJpb3JpdHksXG4gICAgICAgIHByb2plY3RTZWxlY3Rpb24scHJvamVjdFBhcmVudCxkdWVEYXRlKTtcbiAgICByZXR1cm4gdGFza09iajtcbn0iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCB7IGFkZFByb2plY3RUb0RPTSwgcmVuZGVyRHJvcERvd24sIGdldFVzZXJJbnB1dEZyb21ET00gfSBmcm9tICcuL0RPTUNyZWF0aW9uJztcbmltcG9ydCB7IG9wZW5Nb2RhbCwgY2xvc2VNb2RhbCwgYm9yZGVyT25DbGljayB9IGZyb20gJy4vdXRpbGl0aWVzJztcbmltcG9ydCB7IFByb2plY3QsIHByb2plY3ROdW1Db3VudCB9IGZyb20gJy4vcHJvamVjdExvZ2ljJztcblxuY29uc3QgY3JlYXRlUHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jcmVhdGUnKTtcbmNvbnN0IHRhc2tCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRhc2snKTtcbmNvbnN0IHN1Ym1pdFRhc2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VibWl0Jyk7XG5cbmNvbnN0IHByb2plY3RzID0gW107XG5cbmNyZWF0ZVByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgcHJvamVjdE51bUNvdW50Kys7XG4gICAgY29uc3QgcHJvamVjdE9iaiA9IFByb2plY3QoYFByb2plY3QgJHtwcm9qZWN0TnVtQ291bnR9YCwgcHJvamVjdE51bUNvdW50KTtcbiAgICBwcm9qZWN0T2JqLmFkZFByb2plY3QocHJvamVjdHMscHJvamVjdE9iaik7XG4gICAgYWRkUHJvamVjdFRvRE9NKHByb2plY3RPYmopO1xuICAgIGJvcmRlck9uQ2xpY2soKTtcbiAgICAvL2VhY2ggdGltZSB3ZSBjcmVhdGUgYSBwcm9qZWN0IGl0IHJlbmRlcnMgdGhlIGFkZGVkIHByb2plY3QgdG8gb3VyIGRyb3AgZG93biBzZWxlY3Rvci5cbiAgICByZW5kZXJEcm9wRG93bihwcm9qZWN0cywgcHJvamVjdE51bUNvdW50KTtcbn0pO1xudGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtpZD1cInRpdGxlXCJdJykudmFsdWUgPSAnJztcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYVtpZD1cImRlc2NcIl0nKS52YWx1ZSA9ICcnO1xuICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stZm9ybScpO1xuICAgIG9wZW5Nb2RhbChtb2RhbCk7XG59KTtcbm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgbW9kYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsJyk7XG4gICAgbW9kYWxzLmZvckVhY2gobW9kYWwgPT4ge1xuICAgICAgICBjbG9zZU1vZGFsKG1vZGFsKTtcbiAgICB9KVxufSk7XG5cbnN1Ym1pdFRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWZvcm0nKTtcblxuICAgIGlmIChwcm9qZWN0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICBhbGVydCgnWW91IG11c3QgY3JlYXRlIGEgcHJvamVjdCBmaXJzdCcpO1xuICAgICAgICBjbG9zZU1vZGFsKG1vZGFsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXNrID0gZ2V0VXNlcklucHV0RnJvbURPTSgpO1xuXG4gICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgaWYgKHRhc2sucHJvamVjdFBhcmVudCA9PT0gcHJvamVjdC50aXRsZSkge1xuICAgICAgICAgICAgcHJvamVjdC5hZGRUYXNrKHRhc2spO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjbG9zZU1vZGFsKG1vZGFsKTtcblxufSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwib3Blbk1vZGFsIiwibW9kYWwiLCJvdmVybGF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJjbG9zZU1vZGFsIiwicHJvamVjdE51bUNvdW50IiwiY2xlYXJQcmV2aW91c1Rhc2tzIiwiaGFzQ2hpbGROb2RlcyIsImxhc3RDaGlsZCIsImNyZWF0ZVByb2plY3QiLCJ0YXNrQnV0dG9uIiwic3VibWl0VGFzayIsInByb2plY3RzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByb2plY3RPYmoiLCJ0aXRsZSIsInRhc2tzIiwicmVuZGVyVGFzayIsImZvckVhY2giLCJ0YXNrIiwiZGF0ZSIsIm5ld1Rhc2siLCJjbGFzc05hbWUiLCJ0YXNrVGl0bGUiLCJpbm5lclRleHQiLCJkdWVEYXRlIiwiZGV0YWlsc0J1dHRvbiIsImRlbGV0ZUJ0biIsImJ0bkNvbnRhaW5lciIsImNvbnRhaW5lciIsInRpdGxlSGVhZCIsImRlc2NIZWFkIiwiZGF0ZUhlYWQiLCJwcmlvcml0eUhlYWQiLCJkZXNjIiwiZGVzY3JpcHRpb24iLCJwcmlvcml0eSIsImV4aXRCdG4iLCJhcHBlbmQiLCJyZW5kZXJUYXNrRGV0YWlscyIsInJlbW92ZVRhc2siLCJhZGRUYXNrVG9ET00iLCJhZGRUYXNrIiwiYWRkUHJvamVjdCIsImFycmF5IiwicHJvamVjdCIsImluZGV4T2YiLCJQcm9qZWN0IiwibmV3UHJvamVjdCIsInByb2plY3RIZWFkaW5nIiwiYWRkUHJvamVjdFRvRE9NIiwicXVlcnlTZWxlY3RvckFsbCIsImJvcmRlck9uQ2xpY2siLCJhcnJheU51bWJlciIsImRyb3BEb3duTWVudSIsIm9wdGlvbiIsInZhbHVlIiwicmVuZGVyRHJvcERvd24iLCJwcmV2ZW50RGVmYXVsdCIsImFsZXJ0IiwicHJvamVjdFNlbGVjdGlvbiIsInRhc2tPYmoiLCJwcm9qU2VsZWN0aW9uIiwicHJvamVjdFBhcmVudCIsImNyZWF0ZVRhc2tPYmoiLCJzZWxlY3RlZEluZGV4IiwidGV4dCIsImdldFVzZXJJbnB1dEZyb21ET00iXSwic291cmNlUm9vdCI6IiJ9
=======
(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.task.active {\n    opacity: .5;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon {\n    width: 20px;\n    cursor: pointer;\n}\n\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;IAGI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,yCAAyC;IACzC,eAAe;;AAEnB;;AAEA;IACI,mCAAmC;IACnC,yBAAyB;IACzB,wBAAwB;IACxB,6BAA6B;;AAEjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uCAAuC;IACvC,mBAAmB;IACnB,wBAAwB;IACxB,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,iDAAiD;IACjD,4BAA4B;IAC5B,+BAA+B;IAC/B,8BAA8B;IAC9B,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,oBAAoB;IACpB,2BAA2B;IAC3B,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,cAAc;IACd,QAAQ;IACR,uBAAuB;IACvB,2BAA2B;IAC3B,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,kBAAkB;IAClB,uBAAuB;IACvB,2BAA2B;IAC3B,uCAAuC;AAC3C;;AAEA;IACI,WAAW;AACf;;AAEA;;;;IAII,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,kBAAkB;IAClB,iDAAiD;IACjD,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,cAAc;IACd,uBAAuB;IACvB,aAAa;IACb,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,QAAQ;IACR;kBACc;IACd,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,uBAAuB;IACvB,kBAAkB;IAClB,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,MAAM;IACN,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;;AAGA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;IACT,QAAQ;IACR,iCAAiC;IACjC,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;IACZ,iDAAiD;IACjD,aAAa;IACb,4BAA4B;IAC5B,6BAA6B;IAC7B,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,6BAA6B;IAC7B,4BAA4B;AAChC;;AAEA;;IAEI,8BAA8B;IAC9B,gCAAgC;IAChC,eAAe;;AAEnB;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.task.active {\n    opacity: .5;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon {\n    width: 20px;\n    cursor: pointer;\n}\n\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=a(m,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var l=t(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),d=t(216),l=t.n(d),u=t(589),A=t.n(u),m=t(426),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=l(),e()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const f=n=>{const e=document.getElementById("overlay");n.classList.add("active"),e.classList.add("active")},h=n=>{const e=document.getElementById("overlay");n.classList.remove("active"),e.classList.remove("active")};let g=0;var v={};function b(){return v}function x(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function B(n){x(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function C(n,e){x(2,arguments);var t=B(n),r=B(e),a=t.getTime()-r.getTime();return a<0?-1:a>0?1:a}function y(n,e){x(2,arguments);var t=B(n),r=B(e),a=t.getFullYear()-r.getFullYear(),o=t.getMonth()-r.getMonth();return 12*a+o}function I(n){x(1,arguments);var e=B(n);return e.setHours(23,59,59,999),e}function k(n){x(1,arguments);var e=B(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function w(n){x(1,arguments);var e=B(n);return I(e).getTime()===k(e).getTime()}function E(n,e){x(2,arguments);var t,r=B(n),a=B(e),o=C(r,a),i=Math.abs(y(r,a));if(i<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-o*i);var s=C(r,a)===-o;w(B(n))&&1===i&&1===C(n,a)&&(s=!1),t=o*(i-Number(s))}return 0===t?0:t}function M(n,e){return x(2,arguments),B(n).getTime()-B(e).getTime()}var j={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function S(n){return n?j[n]:j.trunc}function T(n,e,t){x(2,arguments);var r=M(n,e)/1e3;return S(null==t?void 0:t.roundingMethod)(r)}var D={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function P(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const W={date:P({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:P({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:P({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function N(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=null!=t&&t.width?String(t.width):a;r=n.formattingValues[o]||n.formattingValues[a]}else{var i=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const L={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:N({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:N({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:N({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:N({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:N({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?X(c,(function(n){return n.test(s)})):z(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var l=e.slice(s.length);return{value:i,rest:l}}}function z(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function X(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var F,O={ordinalNumber:(F={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(F.matchPattern);if(!t)return null;var r=t[0],a=n.match(F.parsePattern);if(!a)return null;var o=F.valueCallback?F.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=n.slice(r.length);return{value:o,rest:i}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Q={code:"en-US",formatDistance:function(n,e,t){var r,a=D[n];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:W,formatRelative:function(n,e,t,r){return q[n]},localize:L,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};function R(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}function U(n){return R({},n)}function J(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var H=1440,Z=43200;function V(n,e,t){var r,a;x(2,arguments);var o=b(),i=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:o.locale)&&void 0!==r?r:Q;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var s=C(n,e);if(isNaN(s))throw new RangeError("Invalid time value");var c,d,l=R(U(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:s});s>0?(c=B(e),d=B(n)):(c=B(n),d=B(e));var u,A=T(d,c),m=(J(d)-J(c))/1e3,p=Math.round((A-m)/60);if(p<2)return null!=t&&t.includeSeconds?A<5?i.formatDistance("lessThanXSeconds",5,l):A<10?i.formatDistance("lessThanXSeconds",10,l):A<20?i.formatDistance("lessThanXSeconds",20,l):A<40?i.formatDistance("halfAMinute",0,l):A<60?i.formatDistance("lessThanXMinutes",1,l):i.formatDistance("xMinutes",1,l):0===p?i.formatDistance("lessThanXMinutes",1,l):i.formatDistance("xMinutes",p,l);if(p<45)return i.formatDistance("xMinutes",p,l);if(p<90)return i.formatDistance("aboutXHours",1,l);if(p<H){var f=Math.round(p/60);return i.formatDistance("aboutXHours",f,l)}if(p<2520)return i.formatDistance("xDays",1,l);if(p<Z){var h=Math.round(p/H);return i.formatDistance("xDays",h,l)}if(p<86400)return u=Math.round(p/Z),i.formatDistance("aboutXMonths",u,l);if((u=E(d,c))<12){var g=Math.round(p/Z);return i.formatDistance("xMonths",g,l)}var v=u%12,y=Math.floor(u/12);return v<3?i.formatDistance("aboutXYears",y,l):v<9?i.formatDistance("overXYears",y,l):i.formatDistance("almostXYears",y+1,l)}function G(n){for(;n.hasChildNodes();)n.removeChild(n.lastChild)}const $=document.querySelector(".create"),_=document.querySelector(".add-task"),K=document.querySelector(".submit"),nn=document.querySelector(".icon"),en=[];$.addEventListener("click",(()=>{!function(n){g++;const e=((n,e)=>{let t=[];return{title:n,id:e,tasks:t,renderTask:n=>{t.forEach((e=>function(n,e){const t=document.querySelector(".tasks"),r=document.createElement("div");r.className="task";const a=document.createElement("h3");a.innerText=n.title;const o=document.createElement("p");o.innerText=n.dueDate;const i=document.createElement("button");i.innerText="Details",i.className="details-btn";const s=document.createElement("button");s.innerText="Delete",s.className="delete-button";const c=document.createElement("img");c.src="../src/assets/tick.svg",c.className="icon";const d=document.createElement("div");d.className="btn-container",i.addEventListener("click",(()=>{!function(n,e){G(n);const t=document.createElement("h3"),r=document.createElement("h3"),a=document.createElement("h3"),o=document.createElement("h3");t.innerText="Title:",r.innerText="Description:",a.innerText="Due date:",o.innerText="Priority:";const i=document.createElement("p");i.innerText=e.title;const s=document.createElement("p");s.innerText=e.description;const c=document.createElement("p");c.innerText=e.dueDate;const d=document.createElement("p");d.innerText=e.priority;const l=document.createElement("button");l.innerText="Close",l.className="close-button",l.addEventListener("click",(()=>{h(n)})),f(n),n.append(t,i,r,s,a,c,o,d,l)}(document.querySelector(".task-details"),n)})),s.addEventListener("click",(()=>{r.remove(),e.removeTask(n)})),1==n.completed&&r.classList.add("active"),c.addEventListener("click",(()=>{if(0==n.completed)return r.classList.add("active"),void(n.completed=!0);n.completed=!1,r.classList.remove("active")})),d.append(i,s,c),t.append(r),r.append(a,o,function(n){const e=document.createElement("p"),t=n.dueDate,r=t.slice(0,4),a=t.slice(5,7),o=t.slice(8,11),i=function(n,e){return x(1,arguments),V(n,Date.now(),e)}(new Date(r,a-1,o));return e.style.fontWeight="bold",e.innerText=`To-do in ${i}`,e}(n),d)}(e,n)))},addTask:n=>{n.id=t.length+1,t.push(n)},addProject:(n,e)=>{n.push(e)},removeTask:n=>{const e=t.indexOf(n);t.splice(e,1)},sortTasks:()=>{t=t.sort(((n,e)=>e.dueDate>n.dueDate?-1:1))}}})(`Project ${g}`,g);e.addProject(n,e);const t=document.querySelector(".projects"),r=document.createElement("div");r.className="project";const a=document.createElement("h3");a.innerText=e.title,t.append(r),r.append(a),r.addEventListener("click",(()=>{G(document.querySelector(".tasks")),e.sortTasks(),e.renderTask(e)}))}(en),function(){const n=[...document.querySelectorAll(".project")];n.forEach((e=>{e.addEventListener("click",(()=>{n.forEach((n=>n.classList.remove("active"))),e.classList.add("active")}))}))}(),function(n,e){const t=document.getElementById("project");if(0===n.length)return;const r=document.createElement("option");r.value=e,r.innerText=`Project ${e}`,t.append(r)}(en,g)})),_.addEventListener("click",(()=>{var n;n=document.querySelector(".task-form"),document.querySelector('input[id="title"]').value="",document.querySelector('textarea[id="desc"]').value="",f(n)})),overlay.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{h(n)}))})),nn.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{h(n)}))})),K.addEventListener("click",(n=>{n.preventDefault(),function(n){const e=document.querySelector(".task-form");if(0==n.length)return alert("You must create a project first"),void h(e);if(null===document.querySelector('input[name="priority"]:checked'))return void alert("Please select a priority");const t=function(){const n=document.getElementById("title").value,e=document.getElementById("desc").value,t=document.querySelector('input[name="priority"]:checked').id,r=document.getElementById("project");return((n,e,t,r,a,o)=>({id:0,title:n,description:e,priority:t,projSelection:r,projectParent:a,dueDate:document.getElementById("date").value,completed:!1}))(n,e,t,r,r.options[r.selectedIndex].text)}();""!==t.title&&(n.forEach((n=>{t.projectParent===n.title&&n.addTask(t)})),h(e))}(en)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> rework
