(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #364f53;\n    --background-clr: #182425;\n    --main-font-clr: #ffffff;\n    --popup-bg-clr: #0c1213;\n    --project-task-hover: #2e3335;\n    --btn-font-clr: white;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    /* margin-top: 50px; */\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n    width: 100%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: flex-start;\n    padding: 20px 40px 20px 40px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    overflow: scroll;\n}\n/* .projects {\n    flex-direction: column;\n} */\n\n.projects {\n    position: relative;\n    max-height: 45%;\n    margin-bottom: 20px;\n    padding-top: 60px;\n}\n\n.input-container {\n    display: flex;\n    gap: 12px;\n    position: fixed;\n    top: 0;\n    transform: translateY(70px);\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    position: relative;\n    align-items: center;\n    padding: 10px 20px 10px 20px;\n    width: 300px;\n    color: var(--main-font-clr);\n    background-color: var(--popup-bg-clr);\n    border-radius: 6px;\n    cursor: pointer;\n}\n\n.project::after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 5px;\n    bottom: 0;\n    transition: width 400ms;\n    background: white;\n}\n.project.active::after {\n    width: 85%;\n}\n\n#project-name {\n    border-radius: 5px;\n    border: none;\n    padding: 5px 0px 5px 20px;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    padding-right: 20px;\n    border-radius: 7px;\n    background-color: var(--popup-bg-clr);\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n    transition: 500ms;\n}\n\n.task.active {\n    opacity: .6;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.edit-submit,\n.tasks > .task .delete-button,\n.tasks > .task .edit-button,\n.inner > .edit-task,\n.inner > .add-task {\n    border: none;\n    padding: 8px 10px 8px 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    color: white;\n    cursor: pointer;\n}\n\n.inner > .add-task {\n    margin-top: 15px;\n}\n\n.task-details > .close-button {\n    margin-top: 10px;\n}\n\n.tasks > .task .delete-button {\n    background: hsl(0, 100%, 60%);\n    transition: all 250ms;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 7px;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 15%;\n    max-width: 60%;\n    padding: 20px;\n    background-color: var(--popup);\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    background-color: var(--popup-bg-clr);\n    color: var(--main-font-clr);\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 15%;\n    background-color: var(--popup-bg-clr);\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon,\n.plus-icon {\n    width: 20px;\n    cursor: pointer;\n    filter: invert(100%) sepia(71%) saturate(0%) hue-rotate(206deg) brightness(106%) contrast(107%);\n}\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 5px;\n    color: white;\n}\n\n.inner :is(#priority, #project, #date, input, textarea) {\n    width: 100%;\n    background: none;\n    color: white;\n    border-radius: 5px;\n    border: none;\n    border: solid 1px var(--main-font-clr);\n    padding: 5px 0 5px 5px;\n\n}\n\n.inner > textarea {\n    border: solid 1px var(--main-font-clr);\n}\n\n.inner > textarea:focus,\n.inner > input:focus {\n    outline: solid 3px var(--prjct-tsk-background-clr);\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .7);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task,\n.create-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    /* width: 135px; */\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n    color: var(--btn-font-clr);\n}\n/* \n.add-task {\n    margin-top: 20px;\n} */\n\n.create:hover,\n.create-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #364f53;\n    --background-clr: #182425;\n    --main-font-clr: #ffffff;\n    --popup-bg-clr: #0c1213;\n    --project-task-hover: #2e3335;\n    --btn-font-clr: white;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    /* margin-top: 50px; */\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n    width: 100%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    justify-content: flex-start;\n    padding: 20px 40px 20px 40px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    overflow: scroll;\n}\n/* .projects {\n    flex-direction: column;\n} */\n\n.projects {\n    position: relative;\n    max-height: 45%;\n    margin-bottom: 20px;\n    padding-top: 60px;\n}\n\n.input-container {\n    display: flex;\n    gap: 12px;\n    position: fixed;\n    top: 0;\n    transform: translateY(70px);\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    position: relative;\n    align-items: center;\n    padding: 10px 20px 10px 20px;\n    width: 300px;\n    color: var(--main-font-clr);\n    background-color: var(--popup-bg-clr);\n    border-radius: 6px;\n    cursor: pointer;\n}\n\n.project::after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 5px;\n    bottom: 0;\n    transition: width 400ms;\n    background: white;\n}\n.project.active::after {\n    width: 85%;\n}\n\n#project-name {\n    border-radius: 5px;\n    border: none;\n    padding: 5px 0px 5px 20px;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    padding-right: 20px;\n    border-radius: 7px;\n    background-color: var(--popup-bg-clr);\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n    transition: 500ms;\n}\n\n.task.active {\n    opacity: .6;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.edit-submit,\n.tasks > .task .delete-button,\n.tasks > .task .edit-button,\n.inner > .edit-task,\n.inner > .add-task {\n    border: none;\n    padding: 8px 10px 8px 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    color: white;\n    cursor: pointer;\n}\n\n.inner > .add-task {\n    margin-top: 15px;\n}\n\n.task-details > .close-button {\n    margin-top: 10px;\n}\n\n.tasks > .task .delete-button {\n    background: hsl(0, 100%, 60%);\n    transition: all 250ms;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 7px;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 15%;\n    max-width: 60%;\n    padding: 20px;\n    background-color: var(--popup);\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    background-color: var(--popup-bg-clr);\n    color: var(--main-font-clr);\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 15%;\n    background-color: var(--popup-bg-clr);\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon,\n.plus-icon {\n    width: 20px;\n    cursor: pointer;\n    filter: invert(100%) sepia(71%) saturate(0%) hue-rotate(206deg) brightness(106%) contrast(107%);\n}\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 5px;\n    color: white;\n}\n\n.inner :is(#priority, #project, #date, input, textarea) {\n    width: 100%;\n    background: none;\n    color: white;\n    border-radius: 5px;\n    border: none;\n    border: solid 1px var(--main-font-clr);\n    padding: 5px 0 5px 5px;\n\n}\n\n.inner > textarea {\n    border: solid 1px var(--main-font-clr);\n}\n\n.inner > textarea:focus,\n.inner > input:focus {\n    outline: solid 3px var(--prjct-tsk-background-clr);\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .7);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task,\n.create-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    /* width: 135px; */\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n    color: var(--btn-font-clr);\n}\n/* \n.add-task {\n    margin-top: 20px;\n} */\n\n.create:hover,\n.create-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0;var r={};(()=>{t.d(r,{t:()=>mn,q:()=>pn});var n=t(379),e=t.n(n),o=t(795),a=t.n(o),i=t(569),s=t.n(i),c=t(565),l=t.n(c),d=t(216),A=t.n(d),u=t(589),p=t.n(u),m=t(426),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=n=>{const e=document.getElementById("overlay");n.classList.add("active"),e.classList.add("active")},g=n=>{const e=document.getElementById("overlay");n.classList.remove("active"),e.classList.remove("active")},v=(n,e)=>{localStorage.setItem(n,JSON.stringify(e))};JSON.parse(localStorage.getItem("projectNumCount"));const b=n=>{n.tasks.forEach((e=>function(n,e){const{title:t,dueDate:r}=n,o=document.querySelector(".tasks"),a=K("div","task",""),i=K("h3",void 0,t),s=K("p",void 0,r),c=K("button","details-btn","Details"),l=K("button","delete-button","Delete"),d=K("button","edit-button","Edit"),A=nn("img","icon",an),u=K("div","btn-container",""),p=function(n){const e=document.createElement("p"),t=n.dueDate,r=t.slice(0,4),o=t.slice(5,7),a=t.slice(8,11),i=function(n,e){return I(1,arguments),_(n,Date.now(),e)}(new Date(r,o-1,a));e.style.fontWeight="bold",!1===n.completed?e.innerText=`To-do in ${i}`:(e.innerText="Completed",e.style.color="green");return{el:e,setCountdown:()=>{e.innerText=`To-do in ${i}`,e.style.color="white"},setCompleted:()=>{e.innerText="Completed",e.style.color="green"}}}(n);c.el.addEventListener("click",(()=>{!function(n,e){cn(n);const t=document.createElement("h3"),r=document.createElement("h3"),o=document.createElement("h3"),a=document.createElement("h3");t.innerText="Title:",r.innerText="Description:",o.innerText="Due date:",a.innerText="Priority:";const i=document.createElement("p");i.innerText=e.title;const s=document.createElement("p");s.innerText=e.description;const c=document.createElement("p");c.innerText=e.dueDate;const l=document.createElement("p");l.innerText=e.priority;const d=document.createElement("button");d.innerText="Close",d.className="close-button",d.addEventListener("click",(()=>{g(n)})),h(n),n.append(t,i,r,s,o,c,a,l,d)}(document.querySelector(".task-details"),n)})),d.el.addEventListener("click",(()=>{!function(n,e){cn(n);const t=K("form","inner",""),r=en("input","text","title","title","Title");r.el.value=e.title;const o=en("textarea",void 0,"desc","desc","Brief description of task");o.el.value=e.description;const a=tn("priority","priority"),i=["Low","Normal","High"];for(let n=0;n<3;n++){const e=on(i[n],i[n]);a.el.append(e.el)}for(let n=0;n<3;n++)e.priority===i[n]&&(a.el.selectedIndex=n);const s=en("input","date","date","date");s.el.value=e.dueDate;const c=K("button","edit-task","Edit task"),l=nn("img","icon","../src/assets/close.svg");c.el.addEventListener("click",(t=>{t.preventDefault(),e.title=r.el.value,e.description=o.el.value,e.dueDate=s.el.value,e.priority=i[a.el.selectedIndex],g(n),v("projects",pn),pn.forEach((n=>{e.projectParent===n.title&&(cn(document.querySelector(".tasks")),b(n))}))})),l.el.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{g(n)}))})),h(n),t.el.append(r.el,o.el,a.el,s.el,c.el),n.append(t.el,l.el)}(document.querySelector(".task-form"),n)})),l.el.addEventListener("click",(()=>{confirm("Are you sure you want to delete this task?")&&(a.el.remove(),x(n,e),v("projects",pn))})),1==n.completed&&a.el.classList.add("active"),A.el.addEventListener("click",(()=>{if(0==n.completed)return p.setCompleted(),a.el.classList.add("active"),n.completed=!0,void v("projects",pn);p.setCountdown(),n.completed=!1,v("projects",pn),a.el.classList.remove("active")})),u.el.append(c.el,d.el,l.el,A.el),o.append(a.el),a.el.append(i.el,s.el,p.el,u.el)}(e,n)))},x=(n,{tasks:e})=>{const t=e.indexOf(n);e.splice(t,1)};var C={};function B(){return C}function I(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function k(n){I(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(n,e){I(2,arguments);var t=k(n),r=k(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}function w(n,e){I(2,arguments);var t=k(n),r=k(e),o=t.getFullYear()-r.getFullYear(),a=t.getMonth()-r.getMonth();return 12*o+a}function E(n){I(1,arguments);var e=k(n);return e.setHours(23,59,59,999),e}function j(n){I(1,arguments);var e=k(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function M(n){I(1,arguments);var e=k(n);return E(e).getTime()===j(e).getTime()}function S(n,e){I(2,arguments);var t,r=k(n),o=k(e),a=y(r,o),i=Math.abs(w(r,o));if(i<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-a*i);var s=y(r,o)===-a;M(k(n))&&1===i&&1===y(n,o)&&(s=!1),t=a*(i-Number(s))}return 0===t?0:t}function D(n,e){return I(2,arguments),k(n).getTime()-k(e).getTime()}var T={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function W(n){return n?T[n]:T.trunc}function P(n,e,t){I(2,arguments);var r=D(n,e)/1e3;return W(null==t?void 0:t.roundingMethod)(r)}var q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const N={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function F(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const X={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:F({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:F({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:F({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:F({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:F({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function z(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?Q(c,(function(n){return n.test(s)})):O(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var d=e.slice(s.length);return{value:i,rest:d}}}function O(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function Q(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var R,U={ordinalNumber:(R={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(R.matchPattern);if(!t)return null;var r=t[0],o=n.match(R.parsePattern);if(!o)return null;var a=R.valueCallback?R.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const H={code:"en-US",formatDistance:function(n,e,t){var r,o=q[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:N,formatRelative:function(n,e,t,r){return L[n]},localize:X,match:U,options:{weekStartsOn:0,firstWeekContainsDate:1}};function J(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}function Z(n){return J({},n)}function G(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var V=1440,$=43200;function _(n,e,t){var r,o;I(2,arguments);var a=B(),i=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:a.locale)&&void 0!==r?r:H;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var s=y(n,e);if(isNaN(s))throw new RangeError("Invalid time value");var c,l,d=J(Z(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:s});s>0?(c=k(e),l=k(n)):(c=k(n),l=k(e));var A,u=P(l,c),p=(G(l)-G(c))/1e3,m=Math.round((u-p)/60);if(m<2)return null!=t&&t.includeSeconds?u<5?i.formatDistance("lessThanXSeconds",5,d):u<10?i.formatDistance("lessThanXSeconds",10,d):u<20?i.formatDistance("lessThanXSeconds",20,d):u<40?i.formatDistance("halfAMinute",0,d):u<60?i.formatDistance("lessThanXMinutes",1,d):i.formatDistance("xMinutes",1,d):0===m?i.formatDistance("lessThanXMinutes",1,d):i.formatDistance("xMinutes",m,d);if(m<45)return i.formatDistance("xMinutes",m,d);if(m<90)return i.formatDistance("aboutXHours",1,d);if(m<V){var f=Math.round(m/60);return i.formatDistance("aboutXHours",f,d)}if(m<2520)return i.formatDistance("xDays",1,d);if(m<$){var h=Math.round(m/V);return i.formatDistance("xDays",h,d)}if(m<86400)return A=Math.round(m/$),i.formatDistance("aboutXMonths",A,d);if((A=S(l,c))<12){var g=Math.round(m/$);return i.formatDistance("xMonths",g,d)}var v=A%12,b=Math.floor(A/12);return v<3?i.formatDistance("aboutXYears",b,d):v<9?i.formatDistance("overXYears",b,d):i.formatDistance("almostXYears",b+1,d)}function K(n,e,t){const r=document.createElement(n);return r.className=e,r.innerText=t,{el:r}}function nn(n,e,t){const r=document.createElement(n);return r.src=t,r.className=e,{el:r}}function en(n,e,t,r,o=""){const a=document.createElement(n);return a.setAttribute("type",e),a.setAttribute("name",t),a.id=r,a.setAttribute("placeholder",o),{el:a}}function tn(n,e){const t=document.createElement("select");return t.setAttribute("name",n),t.id=e,{el:t}}function rn(n,e){const t=document.createElement("label");return t.for=n,t.textContent=e,{el:t}}function on(n,e){const t=document.createElement("option");return t.value=n,t.innerText=e,{el:t}}const an=t.p+"tick.svg",sn=t.p+"close.svg";function cn(n){for(;n.hasChildNodes();)n.removeChild(n.lastChild)}const ln=t.p+"plus.svg";function dn(n){const e=document.querySelector(".projects"),t=document.createElement("div");t.dataset.selected=!1,t.className="project",t.classList.remove("active");const r=document.createElement("h3");r.innerText=n.title,e.append(t),t.append(r),t.addEventListener("click",(()=>{cn(document.querySelector(".tasks")),b(n),[...document.querySelectorAll(".project")].forEach((n=>{n.classList.remove("active"),n.dataset.selected=!1})),t.classList.add("active"),t.dataset.selected=!0}))}const An=document.querySelector(".create"),un=document.querySelector(".create-task"),pn=JSON.parse(localStorage.getItem("projects"))||[];let mn=JSON.parse(localStorage.getItem("numberForDropDown"))||[];An.addEventListener("click",(()=>{5!==pn.length?function(){const n=document.querySelector(".projects"),e=K("div","input-container",""),t=en("input","text","project-name","project-name","Project title"),r=nn("img","plus-icon",ln);n.appendChild(e.el),e.el.append(t.el,r.el),r.el.addEventListener("click",(()=>{const n=t.el.value,e={title:n,id:undefined,tasks:[],addProject:(n,e)=>{n.push(e)}};e.addProject(pn,e),dn(e),v("projects",pn),mn.push(n),console.log(mn),v("numberForDropDown",mn),t.el.value=""}))}():alert("Too many projects already")})),pn.forEach(dn),un.addEventListener("click",(()=>{const n=document.querySelector(".task-form");!function(n){h(n)}(n),function(n,e,t){cn(n);const r=K("form","inner",""),o=rn("title","Title"),a=en("input","text","title","title"),i=rn("desc","Description"),s=en("textarea",void 0,"desc","desc"),c=rn("priority","Priority"),l=tn("priority","priority");for(let n=0;n<3;n++){const e=on(n,["Low","Normal","High"][n]);l.el.append(e.el)}const d=rn("project","Project"),A=tn("project","project");t.forEach(((n,e)=>{const t=on(e,n);A.el.append(t.el)}));const u=rn("date","Due date"),p=en("input","date","date","date"),m=K("button","add-task","Add the task"),f=nn("img","icon",sn);m.el.addEventListener("click",(n=>{n.preventDefault(),function(n){const e=document.querySelector(".task-form");if(0==n.length)return alert("You must create a project first"),void g(e);const t=function(){const n=document.getElementById("title").value,e=document.getElementById("desc").value,t=document.getElementById("priority"),r=t.options[t.selectedIndex].text,o=document.getElementById("project");return((n,e,t,r,o,a)=>({id:0,title:n,description:e,priority:t,projSelection:r,projectParent:o,dueDate:document.getElementById("date").value,completed:!1}))(n,e,r,o,o.options[o.selectedIndex].text)}();""!==t.title&&""!==t.dueDate&&(n.forEach((e=>{t.projectParent===e.title&&(cn(document.querySelector(".tasks")),((n,{tasks:e})=>{n.id=e.length+1,e.push(n)})(t,e),(({tasks:n})=>{n=n.sort(((n,e)=>e.dueDate>n.dueDate?-1:1))})(e),b(e),v("projects",n))})),g(e))}(e)})),f.el.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{g(n)}))})),r.el.append(o.el,a.el,i.el,s.el,c.el,l.el,d.el,A.el,u.el,p.el,m.el),n.append(r.el,f.el)}(n,pn,mn)})),overlay.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((n=>{g(n)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,