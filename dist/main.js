(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.task.active {\n    opacity: .5;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.edit-submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon {\n    width: 20px;\n    cursor: pointer;\n}\n\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;IAGI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,yCAAyC;IACzC,eAAe;;AAEnB;;AAEA;IACI,mCAAmC;IACnC,yBAAyB;IACzB,wBAAwB;IACxB,6BAA6B;;AAEjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uCAAuC;IACvC,mBAAmB;IACnB,wBAAwB;IACxB,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,iDAAiD;IACjD,4BAA4B;IAC5B,+BAA+B;IAC/B,8BAA8B;IAC9B,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,oBAAoB;IACpB,2BAA2B;IAC3B,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,cAAc;IACd,QAAQ;IACR,uBAAuB;IACvB,2BAA2B;IAC3B,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,kBAAkB;IAClB,uBAAuB;IACvB,2BAA2B;IAC3B,uCAAuC;AAC3C;;AAEA;IACI,WAAW;AACf;;AAEA;;;;;IAKI,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,kBAAkB;IAClB,iDAAiD;IACjD,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,cAAc;IACd,uBAAuB;IACvB,aAAa;IACb,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,QAAQ;IACR;kBACc;IACd,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,uBAAuB;IACvB,kBAAkB;IAClB,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,MAAM;IACN,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;;AAGA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;IACT,QAAQ;IACR,iCAAiC;IACjC,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;IACZ,iDAAiD;IACjD,aAAa;IACb,4BAA4B;IAC5B,6BAA6B;IAC7B,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,6BAA6B;IAC7B,4BAA4B;AAChC;;AAEA;;IAEI,8BAA8B;IAC9B,gCAAgC;IAChC,eAAe;;AAEnB;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["*,\n*::after,\n*::before {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 15px;\n\n}\n\n:root {\n    --prjct-tsk-background-clr: #d5eaec;\n    --background-clr: #2e3335;\n    --main-font-clr: #1b1e1f;\n    --project-task-hover: #2e3335;\n\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--background-clr);\n    align-items: center;\n    /* position: relative; */\n    margin-top: 50px;\n    height: 100vh;\n}\n\n#container {\n    min-height: 70%;\n}\n\n.projects,\n.tasks {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 10px;\n    background-color: var(--prjct-tsk-background-clr);\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border-bottom-left-radius: 5px;\n    width: 300px;\n    overflow: scroll;\n}\n\n.projects {\n    max-height: 45%;\n    margin-bottom: 20px;\n}\n\n.projects > .project {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    padding-left: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: var(--main-font-clr);\n    background-color: white;\n    border-radius: 8px;\n    cursor: pointer;\n}\n\n.tasks > .task {\n    display: flex;\n    flex-direction: column;\n    flex-shrink: 0;\n    gap: 5px;\n    align-items: flex-start;\n    justify-content: flex-start;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    padding-left: 20px;\n    border-radius: 7px;\n    background-color: white;\n    color: var(--main-font-clr);\n    border: solid 4px var(--background-clr);\n}\n\n.task.active {\n    opacity: .5;\n}\n\n.tasks > .task .details-btn,\n.task-details > .close-button,\n.submit,\n.edit-submit,\n.tasks > .task .delete-button {\n    border: none;\n    padding: 10px;\n    font-weight: bold;\n    border-radius: 7px;\n    background-color: var(--prjct-tsk-background-clr);\n    cursor: pointer;\n}\n\n.btn-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.task-details {\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    top: 30%;\n    max-width: 60%;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    transform: scale(0);\n}\n\n.task-details > h3 {\n    margin: 10px 0 10px 0;\n}\n\n.task-details.active {\n    position: fixed;\n    top: 30%;\n    /* width: 40%;\n    height: 60%; */\n    background-color: white;\n    transform: scale(1);\n}\n\n.task-details > .close-button {\n    width: 64px;\n}\n\n.project.active {\n    border: solid 4px var(--background-clr)\n}\n\n.modal {\n    position: fixed;\n    transform: scale(0);\n    top: 30%;\n    background-color: white;\n    border-radius: 8px;\n    transition: transform 250ms;\n    z-index: 10;\n}\n\n.modal.active {\n    transform: scale(1);\n}\n\n.modal .icon {\n    position: absolute;\n    margin-top: 8px;\n    margin-right: 8px;\n    top: 0;\n    right: 0;\n}\n\n.icon {\n    width: 20px;\n    cursor: pointer;\n}\n\n\n.task-form {\n    padding: 35px 35px;\n    font-weight: bold;\n}\n\n.task-form .inner {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.task-form input::placeholder,\n.task-form textarea::placeholder {\n    font-weight: bold;\n}\n\n.task-form textarea {\n    resize: none;\n    height: 100px;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0,0,0, .5);\n    pointer-events: none;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.create,\n.add-task {\n    border: none;\n    background-color: var(--prjct-tsk-background-clr);\n    padding: 20px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    font-size: 14px;\n    width: 135px;\n    font-weight: bold;\n    box-shadow: 0px 0px 0px white;\n    transition: box-shadow 500ms;\n}\n\n.create:hover,\n.add-task:hover {\n    box-shadow: 23px 0px 0px white;\n    color: var(--project-task-hover);\n    cursor: pointer;\n\n}\n\n#title.invalid {\n    border: solid 3px red;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var m=a(p,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r={};(()=>{t.d(r,{t:()=>ue});var e=t(379),n=t.n(e),a=t(795),o=t.n(a),i=t(569),s=t.n(i),c=t(565),d=t.n(c),l=t(216),u=t.n(l),A=t(589),p=t.n(A),m=t(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=e=>{const n=document.getElementById("overlay");e.classList.add("active"),n.classList.add("active")},g=e=>{const n=document.getElementById("overlay");e.classList.remove("active"),n.classList.remove("active")};let v=0;var b={};function x(){return b}function C(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function B(e){C(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e,n){C(2,arguments);var t=B(e),r=B(n),a=t.getTime()-r.getTime();return a<0?-1:a>0?1:a}function I(e,n){C(2,arguments);var t=B(e),r=B(n),a=t.getFullYear()-r.getFullYear(),o=t.getMonth()-r.getMonth();return 12*a+o}function k(e){C(1,arguments);var n=B(e);return n.setHours(23,59,59,999),n}function w(e){C(1,arguments);var n=B(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(23,59,59,999),n}function E(e){C(1,arguments);var n=B(e);return k(n).getTime()===w(n).getTime()}function j(e,n){C(2,arguments);var t,r=B(e),a=B(n),o=y(r,a),i=Math.abs(I(r,a));if(i<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-o*i);var s=y(r,a)===-o;E(B(e))&&1===i&&1===y(e,a)&&(s=!1),t=o*(i-Number(s))}return 0===t?0:t}function M(e,n){return C(2,arguments),B(e).getTime()-B(n).getTime()}var S={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function D(e){return e?S[e]:S.trunc}function T(e,n,t){C(2,arguments);var r=M(e,n)/1e3;return D(null==t?void 0:t.roundingMethod)(r)}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function W(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const N={date:W({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:W({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:W({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function L(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=t&&t.width?String(t.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,s=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[s]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const Y={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:L({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:L({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:L({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:L({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:L({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function O(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=n.match(a);if(!o)return null;var i,s=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?F(c,(function(e){return e.test(s)})):z(c,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var l=n.slice(s.length);return{value:i,rest:l}}}function z(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function F(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var X,J={ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(X.matchPattern);if(!t)return null;var r=t[0],a=e.match(X.parsePattern);if(!a)return null;var o=X.valueCallback?X.valueCallback(a[0]):a[0];o=n.valueCallback?n.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Q={code:"en-US",formatDistance:function(e,n,t){var r,a=P[e];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:N,formatRelative:function(e,n,t,r){return q[e]},localize:Y,match:J,options:{weekStartsOn:0,firstWeekContainsDate:1}};function R(e,n){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e}function U(e){return R({},e)}function H(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var Z=1440,V=43200;function $(e,n,t){var r,a;C(2,arguments);var o=x(),i=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:o.locale)&&void 0!==r?r:Q;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var s=y(e,n);if(isNaN(s))throw new RangeError("Invalid time value");var c,d,l=R(U(t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:s});s>0?(c=B(n),d=B(e)):(c=B(e),d=B(n));var u,A=T(d,c),p=(H(d)-H(c))/1e3,m=Math.round((A-p)/60);if(m<2)return null!=t&&t.includeSeconds?A<5?i.formatDistance("lessThanXSeconds",5,l):A<10?i.formatDistance("lessThanXSeconds",10,l):A<20?i.formatDistance("lessThanXSeconds",20,l):A<40?i.formatDistance("halfAMinute",0,l):A<60?i.formatDistance("lessThanXMinutes",1,l):i.formatDistance("xMinutes",1,l):0===m?i.formatDistance("lessThanXMinutes",1,l):i.formatDistance("xMinutes",m,l);if(m<45)return i.formatDistance("xMinutes",m,l);if(m<90)return i.formatDistance("aboutXHours",1,l);if(m<Z){var f=Math.round(m/60);return i.formatDistance("aboutXHours",f,l)}if(m<2520)return i.formatDistance("xDays",1,l);if(m<V){var h=Math.round(m/Z);return i.formatDistance("xDays",h,l)}if(m<86400)return u=Math.round(m/V),i.formatDistance("aboutXMonths",u,l);if((u=j(d,c))<12){var g=Math.round(m/V);return i.formatDistance("xMonths",g,l)}var v=u%12,b=Math.floor(u/12);return v<3?i.formatDistance("aboutXYears",b,l):v<9?i.formatDistance("overXYears",b,l):i.formatDistance("almostXYears",b+1,l)}function G(e,n,t){const r=document.createElement(e);return r.className=n,r.innerText=t,{el:r}}function _(e,n,t){const r=document.createElement(e);return r.src=t,r.className=n,{el:r}}function K(e,n,t,r,a){const o=document.createElement(e);return o.setAttribute("type",n),o.setAttribute("name",t),o.id=r,o.setAttribute("placeholder",a),{el:o}}function ee(e,n){const t=document.createElement("label");return t.for=e,t.textContent=n,{el:t}}function ne(e,n){const t=document.createElement("option");return t.value=e,t.innerText=n,{el:t}}function te(e){for(;e.hasChildNodes();)e.removeChild(e.lastChild)}function re(e,n){const t=document.querySelector(".tasks"),r=G("div","task",""),a=G("h3",void 0,e.title),o=G("p",void 0,e.dueDate),i=G("button","details-btn","Details"),s=G("button","delete-button","Delete"),c=G("button","edit-button","Edit"),d=_("img","icon","../src/assets/tick.svg"),l=G("div","btn-container","");i.el.addEventListener("click",(()=>{!function(e,n){te(e);const t=document.createElement("h3"),r=document.createElement("h3"),a=document.createElement("h3"),o=document.createElement("h3");t.innerText="Title:",r.innerText="Description:",a.innerText="Due date:",o.innerText="Priority:";const i=document.createElement("p");i.innerText=n.title;const s=document.createElement("p");s.innerText=n.description;const c=document.createElement("p");c.innerText=n.dueDate;const d=document.createElement("p");d.innerText=n.priority;const l=document.createElement("button");l.innerText="Close",l.className="close-button",l.addEventListener("click",(()=>{g(e)})),h(e),e.append(t,i,r,s,a,c,o,d,l)}(document.querySelector(".task-details"),e)})),c.el.addEventListener("click",(()=>{!function(e,n,t){te(e);const r=document.createElement("form");r.className="inner";const a=document.createElement("input");a.type="text",a.name="title",a.id="title",a.value=n.title;const o=document.createElement("textarea");o.name="desc",o.id="desc",o.value=n.description;const i=document.createElement("div");i.className="priority";for(let e=0;e<5;e++){const n=document.createElement("label");n.for="priority1",n.textContent=e+1,i.append(n);const t=document.createElement("input");t.type="radio",t.name="priority",t.id=e+1,i.append(t)}const s=document.createElement("select");s.name="project",s.id="project";for(let e=1;e<=t.length;e++){const n=document.createElement("option");n.value=e,n.innerText=`Project ${e}`,s.append(n)}const c=document.createElement("input");c.type="date",c.name="date",c.id="date",c.value=n.dueDate;const d=document.createElement("button");d.innerText="Edit task";const l=document.createElement("img");l.className="icon",l.src="../src/assets/close.svg",d.addEventListener("click",(t=>{t.preventDefault(),n.title=a.value,n.description=o.value,n.dueDate=c.value,g(e)})),l.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((e=>{g(e)}))})),h(e),r.append(a,o,i,s,c,d),e.append(r,l)}(document.querySelector(".task-details"),e,ue)})),s.el.addEventListener("click",(()=>{r.el.remove(),n.removeTask(e)})),1==e.completed&&r.el.classList.add("active"),d.el.addEventListener("click",(()=>{if(0==e.completed)return r.el.classList.add("active"),void(e.completed=!0);e.completed=!1,r.el.classList.remove("active")})),l.el.append(i.el,s.el,c.el,d.el),t.append(r.el),r.el.append(a.el,o.el,function(e){const n=document.createElement("p"),t=e.dueDate,r=t.slice(0,4),a=t.slice(5,7),o=t.slice(8,11),i=function(e,n){return C(1,arguments),$(e,Date.now(),n)}(new Date(r,a-1,o));return n.style.fontWeight="bold",n.innerText=`To-do in ${i}`,n}(e),l.el)}function ae(e,n,t){te(e);const r=G("form","inner",""),a=K("input","text","title","title","Title"),o=K("textarea",void 0,"desc","desc","Brief description of task"),i=G("div","priority","");for(let e=0;e<5;e++){const n=ee("priority1",e+1);i.el.append(n.el);const t=K("input","radio","priority",e+1,void 0);i.el.append(t.el)}const s=function(e,n){const t=document.createElement("select");return t.setAttribute("name","project"),t.id="project",{el:t}}();for(let e=1;e<=t.length;e++){const n=ne(e,`Project ${e}`);s.el.append(n.el)}const c=K("input","date","date","date"),d=G("button",void 0,"Add the task"),l=_("img","icon","../src/assets/close.svg");d.el.addEventListener("click",(e=>{e.preventDefault(),function(e){const n=document.querySelector(".task-form");if(0==e.length)return alert("You must create a project first"),void g(n);if(null===document.querySelector('input[name="priority"]:checked'))return void alert("Please select a priority");const t=function(){const e=document.getElementById("title").value,n=document.getElementById("desc").value,t=document.querySelector('input[name="priority"]:checked').id,r=document.getElementById("project");return((e,n,t,r,a,o)=>({id:0,title:e,description:n,priority:t,projSelection:r,projectParent:a,dueDate:document.getElementById("date").value,completed:!1}))(e,n,t,r,r.options[r.selectedIndex].text)}();""!==t.title&&(e.forEach((e=>{t.projectParent===e.title&&((e,{tasks:n})=>{e.id=n.length+1,n.push(e)})(t,e)})),g(n))}(n)})),l.el.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((e=>{g(e)}))})),r.el.append(a.el,o.el,i.el,s.el,c.el,d.el),e.append(r.el,l.el)}function oe(e){const n=document.querySelector(".projects"),t=document.createElement("div");t.className="project";const r=document.createElement("h3");r.innerText=e.title,n.append(t),t.append(r),t.addEventListener("click",(()=>{te(document.querySelector(".tasks")),console.log(e.tasks),ie(e),se(e)}))}const ie=({tasks:e})=>{e=e.sort(((e,n)=>n.dueDate>e.dueDate?-1:1))},se=({tasks:e},n)=>{e.forEach((e=>re(e,n)))},ce=document.querySelector(".create"),de=document.querySelector(".add-task"),le=JSON.parse(localStorage.getItem("projects"))||[];let ue=JSON.parse(localStorage.getItem("numberForDropDown"))||[];ce.addEventListener("click",(()=>{v++,localStorage.setItem("projectNumCount",JSON.stringify(v));const e=((e,n)=>{let t=[];return{title:e,id:n,tasks:t,renderTask:e=>{t.forEach((n=>re(n,e)))},addTask:e=>{e.id=t.length+1,t.push(e)},addProject:(e,n)=>{e.push(n)},removeTask:e=>{const n=t.indexOf(e);t.splice(n,1)},sortTasks:()=>{t=t.sort(((e,n)=>n.dueDate>e.dueDate?-1:1))}}})(`Project ${v}`,v);e.addProject(le,e),oe(e),localStorage.setItem("projects",JSON.stringify(le)),ue.push(v),localStorage.setItem("numberForDropDown",JSON.stringify(ue))})),le.forEach(oe),de.addEventListener("click",(()=>{const e=document.querySelector(".task-form");!function(e){h(e)}(e),ae(e,le,ue)})),overlay.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((e=>{g(e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,